№1
def score_hand(cards):
    #score of each card 
    dict_cards ={'A':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'10':10,'J':10,'Q':10,'K':10}
    temp=cards.copy()
    total=0
    #check the score of cards
    for card in temp:
        total+=dict_cards[card] 
    if 'A' in temp:
        while True:
            # "A" can be 1 or 11, in order to get the max value, "A" increased by 10 if total<=11
            if total<=11:
                total+=10
            #if total>11 and "A" change from 1 to 11, total will be larger than 21, which fails
            if total+10>21:
                break
    return total
№2
from math import log
def find_ball(scales, ball_count):
    count=2 if ball_count <=9 else int(log(ball_count, 3))+1 if str(log(ball_count, 3))[-2:]!=".0" else int(log(ball_count, 3))
    res=[i for i in range(ball_count)]    
    for i in range(count):
        if len(res)<=2: break
        flag=scales.get_weight(res[:(len(res)+1)//3], res[(len(res))-(len(res)+1)//3:])
        if flag==-1: 
            res=res[:(len(res)+1)//3] 
        elif flag==1:
            res=res[(len(res))-(len(res)+1)//3:]
        elif flag==0:
            res=res[(len(res)+1)//3:(len(res))-(len(res)+1)//3] 
    if len(res)==1: return res[0]
    return res[0] if scales.get_weight(res[:1], res[1:])==-1 else res[1]
№3
def find_ball(scales):
    leftPan = [0,1,2]
    rightPan = [5,6,7]
    w = scales.get_weight(leftPan, rightPan)
    if w==-1:
        res=leftPan.copy()
    elif w==1:
        res=rightPan.copy()
    else:
        res=[3,4]
    leftPan = res[0:1]
    rightPan = res[-1:]
    w = scales.get_weight(leftPan, rightPan)
    if w==0:
        return res[1]
    elif w==-1:
        return leftPan[0]  
    else:
        return rightPan[0] 
№4
def luck_check(string):
    try:
        temp=int(string)
    except:
        raise 
    Leftsum=0
    Rightsum=0
    index1=0
    index2=len(string)-1
    if len(string)%2==0:
        for i in range(0,len(string)//2):
            Leftsum += int(string[i])
        for i in range(len(string)//2,len(string)):
            Rightsum += int(string[i])
        return Leftsum==Rightsum
    else:
        for i in range(0,len(string)//2):
            Leftsum += int(string[i])
        for i in range(len(string)//2+1,len(string)):
            Rightsum += int(string[i])
        return Leftsum==Rightsum   
№5
def okkOokOo(s):
    res=s[:-1].split("?")
    string=""
    for i in range(len(res)):
        res[i]="".join(res[i].split(", ")).strip().lower()
        res[i]=res[i].replace("o","0").replace("k","1")      
        string+=chr(int(res[i], 2))
    return string
№6
def slogans(p,r):
    combo=set()
    for i in range(len(p)):
        for j in range(i, len(p)):
            combo.add(p[i:j+1])
    total=0
    index=0
    while True:
        flag=True
        for i in range(index, len(r)):
            if r[index:i+1] not in combo:
                index=i
                flag=False
                break
        total+=1
        if flag:
            break
    return total
№7
def flatten(*args):
    return helper(args, [])
def helper(args, res):
    for i in args:
        if isinstance(i, list):
            helper(i, res)
        else:    
            res.append(i)
    return res
№8
def pivot(arr, index):
    dict={}
    flag={}
    for i,j in enumerate(arr[0]):
        if i==index:
            continue
        try:
            float(j)
            flag[i]=-1
        except:
            pass
    for i in arr:
        if not dict.get(i[index], None):
            dict[i[index]]=["-" if not flag.get(j, None) else float(k) for j,k in enumerate(i)]
        else:
            for k in flag.keys():
                dict[i[index]][k]+=float(i[k])
    temp=[v[:index]+[k]+v[index+1:] for k,v in dict.items()]
    return sorted(temp, key=lambda x: x[index])
№9
import datetime
dict1={j:i for i,j in enumerate("SUN MON TUE WED THU FRI SAT".split())}
dict2={j:i for i,j in dict1.items()}
dict3={i+1:j.capitalize() for i,j in enumerate("january february march april may june july august september october november december".split())}
def calendar(year,month):
    temp=datetime.datetime(year, month, 1).strftime("%A")[:3].upper()
    start=dict1[temp]
    calendar=[(str(year)+" "+dict3[month]).center([27, 26][len(dict3[month])%2]).rstrip(" "), "SUN MON TUE WED THU FRI SAT"]
    line=[]
    for i in range(1, date(month, year)+1):
        line.append(str(i).center(3, " "))
        if start==6:
            calendar.append(" ".join(line).rjust(27, " ").rstrip(" "))
            line=[]
        start=(start+1)%7
    return ("\n".join(calendar)+"\n"+" ".join(line)).rstrip("\n")
def date(m, y):
    return [31, 29 if leap_year(y) else 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][m-1]  
def leap_year(y):
    return True if y%400==0 else False if y%100==0 else True if y%4==0 else False
№10
from collections import Counter
from gmpy2 import is_prime
def gen_prime():
    dict={}
    count=0
    for i in range(2, 10001):
        if is_prime(i):
            dict[i]=count
            count+=1
    return dict
primes=gen_prime()
code={1: '()', 2: '(())', 3: '(.())', 4: '((()))', 5: '(..())', 6: '(()())', 7: '(...())', 8: '((.()))', 9: '(.(()))', 10: '(().())', 11: '(....())', 12: '((())())', 13: '(.....())'}
def puzzle(integer):
    if integer<=1:
        return "." if integer==0 else "()"
    res=[]
    temp=sorted(Counter(prime_factorization(integer)).items(), key=lambda x: -x[0])
    for i,j in enumerate(temp):
        if i==0:
            res=["."]*(primes[j[0]]+1)
            res[-1]=code[j[1]]
        else:
            res[primes[j[0]]]=code[j[1]]
    return "("+"".join(res)+")"
def prime_factorization(n):
    res=[]
    factor=2
    while factor*factor<=n:
        if n%factor==0:
            n//=factor
            res.append(factor)
            factor=2
        else:
            factor+=1
    return res+[n]
